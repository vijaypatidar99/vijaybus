c
n
 bus.seats
 bus 
n
 bus 
@ticket.status
n
@ticket.status
@ticket.status != "Confirmed"
n
@ticket.status != "Confirmed"
params[:ticket_id]
c
ccc
c
[200~ ro
[00~ @route~
n
c
@ticket
@ticket.date
@ticket.date.to_s 
c
n
c
@bus.departure_time
@bus.id
@bus.routes.ids
@bus.routes.id
@bus.route.id
@bus.route_id
route_id
params[route.id]
params[route]
params[route_id]
@bus.schedules.route_id
@bus.schedules.route
@bus.schedules.route_id
@bus.schedules
 @bus.route_id 
n
 @bus.price
n
@bus
c
cc
0@u
@bu
c
@bus
n
@bus = Bus.find_by(id: params[:bus_id])
params
c
@bus.price
@bus
c
paramscc
@bus.schedules.last.route
@bus.schedules.last.route_id
@bus.schedules.last
@bus.schedules
@bus.price
@bus
n
c
bus.schedules.where(route_id: params[:route_id]).pluck(:dates).flatten
bus.schedules.where(route_id: params[:route_id]).pluck(:dates).faltten
bus.schedules.where(route_id: params[:route_id]).pluck(:dates)
bus.schedules.pluck(:dates)
paramsbus.schedules.pluck(:dates)bus.schedules.pluck(:dates)bus.schedules.pluck(:dates).bus.schedules.pluck(:dates).bus.schedules.pluck(:dates).bus.schedules.pluck(:dates).(bus.schedules.pluck(:dates).map(bus.schedules.pluck(:dates).map(bus.schedules.pluck(:dates).map(bus.schedules.pluck(:dates).map
c
cc
c'c
c
ccccc
c
cc
params
paraccccc
bus.schedules.where(route_id: params[:route_id])
bus.schedules.where(route_id: params[:route_id]).map(&:dates).compact
bus.schedules.where(route_id: params[:route_id]).map(&:dates)
bus.schedules.where(route_id: params[:route_id]).pluck(:dates)
bus.schedules.pluck(:dates)
n
c
n
 @schedule.bus
@schedule
n
c
@schedule
@schedule.save
@bus
n
c
n
c
n
@ticket.errors.full_messages
@ticket.errors.full_messeges
@ticket.errors
@ticket.save
n
     @ticket.status
n
 @ticket
c
current_user
 @ticket.user
@ticket.errors.full_messages
@ticket.errors.full_message
@ticket.errors
@ticket.save
n
c
@ticket.errors
@ticket.save
n
 @ticket.errors.full_messages
 @ticket.errors.full_message
 @ticket.errors
 @ticket.save
@ticket.status = :Pending
n
 @ticket
n
c
 @bus.errors.full_messages
 @bus.errors
 @bus.save
@bus.error
 @bus.save
n
@bus.errors
bus.errors
@bus.errors
@bus.error
@bus.errors
n
@bus.errors
n
 @bus.errors
 @bus = Bus.new(bus_params)
n
nnn
NN
NNNN
CC
 @bus.errors
 @bus.save
 @bus.dates = dates.reject(&:empty?).map(&:strip).join(", ")
@bus.save.errors
@bus.save.error
@bus.save
n
dates.reject(&:empty?).map(&:strip).join(", ")
 dates.present?
 dates = params[:bus][:dates]
n
c
cc
ec
n
c
n
c
object
object.errors.full_messages
object.errors
c
object.errors.full_messages
c
n
m
n
c
object.errors.full_messages
object.errors
exit
 @bus.dates = dates.reject(&:empty?).map(&:strip).join(', ')
 @bus.dates = dates.split(",").to_s.map(&:strip).reject(&:empty?)
  @bus.dates = dates.split(",")..to_s.map(&:strip).reject(&:empty?)
 if dates.present?
      @bus.dates = dates.split(",").map(&:strip).reject(&:empty?)
    else
      @bus.dates = []
    end
if dates.present?
 dates = params[:bus][:dates]
n
exit
n
exit
n
nn
n
c
n
exit
n
c
object.errors.full_messages
n
object.errors.any?
c
object.errors.any?
c
object.errors.any?
